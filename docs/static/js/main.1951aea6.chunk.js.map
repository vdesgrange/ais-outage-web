{"version":3,"sources":["ais_indexing.js","App.js","reportWebVitals.js","index.js"],"names":["FILES_INDEX","startTime","moment","endTime","publicUrl","process","App","state","error","selectedInterval","temporarySelectedInterval","data","fileLoader","files_to_load","a","Promise","all","filter","x","map","jsonURL","axios","get","then","res","date","collect","setState","fileSearch","startMoment","endMoment","startYear","year","endYear","startMonth","month","endMonth","filepath","y","end_m","m","toString","push","errorHandler","onChangeCallback","debouncedSelectedInterval","debounce","formatTick","ms","format","getFeatureStyle","feature","type","properties","weight","opacity","color","dashArray","undefined","prevProps","prevState","this","console","log","className","MapContainer","id","center","zoom","scrollWheelZoom","TileLayer","attribution","url","length","d","GeoJSON","style","eventHandlers","click","containerClassName","timelineInterval","onUpdateCallback","ticksNumber","react","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1951aea6.chunk.js","sourcesContent":["const FILES_INDEX = {\n  \"2016\": {\n    \"2\": \"2016_02.geojson\",\n    \"3\": \"2016_03.geojson\",\n    \"4\": \"2016_04.geojson\",\n    \"5\": \"2016_05.geojson\",\n    \"6\": \"2016_06.geojson\",\n    \"7\": \"2016_07.geojson\",\n    \"8\": \"2016_08.geojson\",\n    \"9\": \"2016_09.geojson\",\n    \"10\": \"2016_10.geojson\",\n    \"11\": \"2016_11.geojson\",\n    \"12\": \"2016_12.geojson\",\n  },\n  \"2017\": {\n    \"1\": \"2017_01.geojson\",\n    \"2\": \"2017_02.geojson\",\n    \"3\": \"2017_03.geojson\",\n    \"4\": \"2017_04.geojson\",\n    \"5\": \"2017_05.geojson\",\n    \"6\": \"2017_06.geojson\",\n    \"7\": \"2017_07.geojson\",\n    \"8\": \"2017_08.geojson\",\n  }\n};\n\nexport { FILES_INDEX };\n","import react from 'react';\nimport axios from 'axios';\nimport { debounce } from 'lodash';\nimport { MapContainer, TileLayer,  GeoJSON } from 'react-leaflet';\nimport TimeRange from 'react-timeline-range-slider'\nimport moment from 'moment';\nimport './App.css';\nimport { FILES_INDEX } from './ais_indexing';\n// import dataUrl from './2016-11.geojson';\n\nconst startTime = moment(\"2016-02-01 00:00:00\");\nconst endTime = moment(\"2017-08-31 23:59:59\");\nconst publicUrl = process.env.PUBLIC_URL || '';\n\nclass App extends react.Component {\n  state = {\n      error: false,\n      selectedInterval: [startTime, endTime],\n      temporarySelectedInterval: [startTime, endTime],\n      data: [],\n  }\n\n  async componentDidMount() {\n    // const {data} = await axios(dataUrl);\n    // this.setState({data});\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { selectedInterval } = this.state;\n    if (prevState.selectedInterval !== this.state.selectedInterval) {\n      const startMoment = moment(selectedInterval[0]);\n      const endMoment = moment(selectedInterval[1]);\n\n      const files_to_load = this.fileSearch(startMoment, endMoment);\n      this.fileLoader(files_to_load);\n    }\n  }\n\n  fileLoader = async (files_to_load) => {\n    const data = await Promise.all(\n      files_to_load\n      .filter(x => x)\n      .map(jsonURL => axios.get(`${publicUrl}/data/${jsonURL}`).then(res => ({date: jsonURL, collect: res.data})))\n    );\n    this.setState({data})\n  }\n\n  fileSearch = (startMoment, endMoment) => {\n      const startYear = startMoment.year();\n      const endYear =  endMoment.year();\n      const startMonth = startMoment.month() + 1;\n      const endMonth = endMoment.month() + 1;\n      let filepath = \"\";\n      let files_to_load = [];\n\n      for (let y=startYear; y <= endYear; y++) {\n        let init_m = (y === startYear) ? startMonth : 1;\n        let end_m = (y === endYear) ? endMonth : 12;\n\n        for (let m=init_m; m <= end_m; m++) {\n          filepath = FILES_INDEX[y.toString()][m.toString()];\n          files_to_load.push(filepath);\n        }\n      }\n\n      return files_to_load;\n  };\n\n  errorHandler = ({ error }) => this.setState({ error })\n\n  onChangeCallback = temporarySelectedInterval => {\n    this.setState({ temporarySelectedInterval });\n    this.debouncedSelectedInterval(temporarySelectedInterval);\n  }\n\n  debouncedSelectedInterval = debounce(selectedInterval => {\n    this.setState({selectedInterval});\n  }, 500)\n\n  formatTick = ms => moment(ms).format(\"MMM 'YY\");\n\n  getFeatureStyle = (feature) => {\n    const type = feature.properties.type;\n    const color = (['#00A19D', '#FFB344', '#E05D5D'])[type];\n    const dashArray = ([undefined, undefined, 5])[type];\n    const style = {\n      weight: 3,\n      opacity: 1,\n      color,\n      dashArray\n    };\n\n    return style;\n  }\n\n\n  render() {\n    const {data, selectedInterval, temporarySelectedInterval} = this.state;\n    console.log(this.state);\n\n    return (\n      <div className=\"ais-wrapper\">\n        <MapContainer id=\"mapid\" center={[52.377956, 4.897070]} zoom={10} scrollWheelZoom={true}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <TileLayer\n            url=\"https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png\"\n          />\n      { data && data.length && data.map(d => \n        <GeoJSON \n          key={`date-${d.date}`}\n          data={d.collect} \n          style={this.getFeatureStyle} \n          eventHandlers={{\n            click: function () {\n              console.log(this);\n            }\n\n          }}\n          />\n        )}\n        </MapContainer>\n\n        <div className='time-range-section'>\n          <div className='time-range-details'>\n            <div className='from'><b>From</b> {moment(selectedInterval[0]).format(\"D MMMM 'YY HH:mm\")}</div>\n            <div className='to'><b>To</b> {moment(selectedInterval[1]).format(\"D MMMM 'YY HH:mm\")}</div>\n          </div>\n          <TimeRange\n            //sliderRailClassName=\"time-slider\"\n            containerClassName=\"time-container\"\n            timelineInterval={[startTime, endTime]}\n            selectedInterval={temporarySelectedInterval}\n            onUpdateCallback={this.errorHandler}\n            onChangeCallback={this.onChangeCallback}\n            formatTick={this.formatTick}\n            ticksNumber={24}\n          />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}