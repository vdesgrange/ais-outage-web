{"version":3,"sources":["test2.geojson","App.js","reportWebVitals.js","index.js"],"names":["startTime","moment","endTime","App","state","error","selectedInterval","temporarySelectedInterval","data","undefined","errorHandler","setState","onChangeCallback","debouncedSelectedInterval","debounce","formatTick","ms","format","style","feature","weight","opacity","color","dashArray","fillOpacity","a","axios","dataUrl","this","className","MapContainer","id","center","zoom","scrollWheelZoom","TileLayer","attribution","url","GeoJSON","containerClassName","timelineInterval","onUpdateCallback","ticksNumber","react","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gWAAe,G,MAAA,IAA0B,uC,OCSnCA,EAAYC,IAAO,uBACnBC,EAAUD,IAAO,uBA8ERE,E,4MA3EbC,MAAQ,CACJC,OAAO,EACPC,iBAAkB,CAACN,EAAWE,GAC9BK,0BAA2B,CAACP,EAAWE,GACvCM,UAAMC,G,EAUVC,aAAe,gBAAGL,EAAH,EAAGA,MAAH,OAAe,EAAKM,SAAS,CAAEN,W,EAE9CO,iBAAmB,SAAAL,GACjB,EAAKI,SAAS,CAAEJ,8BAChB,EAAKM,0BAA0BN,I,EAGjCM,0BAA4BC,oBAAS,SAAAR,GACnC,EAAKK,SAAS,CAACL,uBACd,K,EAEHS,WAAa,SAAAC,GAAE,OAAIf,IAAOe,GAAIC,OAAO,Y,EAErCC,MAAQ,SAACC,GACL,MAAO,CACLC,OAAQ,EACRC,QAAS,EACTC,MAAO,MACPC,UAAW,IACXC,YAAa,I,8FA1BnB,8BAAAC,EAAA,sEACuBC,IAAMC,GAD7B,gBACSnB,EADT,EACSA,KACPoB,KAAKjB,SAAS,CAACH,SAFjB,gD,0EA+BA,WAAU,IAAD,EACqDoB,KAAKxB,MAA1DI,EADA,EACAA,KAAMF,EADN,EACMA,iBAAkBC,EADxB,EACwBA,0BAE/B,OACE,sBAAKsB,UAAU,cAAf,UACE,eAACC,EAAA,EAAD,CAAcC,GAAG,QAAQC,OAAQ,CAAC,UAAW,SAAWC,KAAM,EAAGC,iBAAiB,EAAlF,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACF,EAAA,EAAD,CACEE,IAAI,yDAEJ7B,GAAQ,cAAC8B,EAAA,EAAD,CAAS9B,KAAMA,EAAMU,MAAOU,KAAKV,WAG7C,sBAAKW,UAAU,qBAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,OAAf,UAAsB,qCAAtB,IAAmC5B,IAAOK,EAAiB,IAAIW,OAAO,uBACtE,sBAAKY,UAAU,KAAf,UAAoB,mCAApB,IAA+B5B,IAAOK,EAAiB,IAAIW,OAAO,0BAEpE,cAAC,IAAD,CAEEsB,mBAAmB,iBACnBC,iBAAkB,CAACxC,EAAWE,GAC9BI,iBAAkBC,EAClBkC,iBAAkBb,KAAKlB,aACvBE,iBAAkBgB,KAAKhB,iBACvBG,WAAYa,KAAKb,WACjB2B,YAAa,e,GApEPC,IAAMC,WCATC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.932553fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/test2.a49320f8.geojson\";","import react from 'react';\nimport axios from 'axios';\nimport { debounce } from 'lodash';\nimport { MapContainer, TileLayer,  GeoJSON } from 'react-leaflet';\nimport TimeRange from 'react-timeline-range-slider'\nimport moment from 'moment';\nimport './App.css';\nimport dataUrl from './test2.geojson'\n\nconst startTime = moment(\"2016-01-01 00:00:00\");\nconst endTime = moment(\"2017-12-31 23:59:59\");\n\nclass App extends react.Component {\n  state = {\n      error: false,\n      selectedInterval: [startTime, endTime],\n      temporarySelectedInterval: [startTime, endTime],\n      data: undefined,\n  }\n\n  async componentDidMount() {\n    const {data} = await axios(dataUrl);\n    this.setState({data});\n    //react.useEffect(async () => { \n    //}, []);\n  }\n\n  errorHandler = ({ error }) => this.setState({ error })\n\n  onChangeCallback = temporarySelectedInterval => {\n    this.setState({ temporarySelectedInterval });\n    this.debouncedSelectedInterval(temporarySelectedInterval);\n  }\n\n  debouncedSelectedInterval = debounce(selectedInterval => {\n    this.setState({selectedInterval});\n  }, 500)\n\n  formatTick = ms => moment(ms).format(\"MMM 'YY\");\n\n  style = (feature) => {\n      return {\n        weight: 3,\n        opacity: 1,\n        color: 'red',\n        dashArray: '3',\n        fillOpacity: 0.0\n      };\n    }\n\n\n  render() {\n    const {data, selectedInterval, temporarySelectedInterval} = this.state;\n\n    return (\n      <div className=\"ais-wrapper\">\n        <MapContainer id=\"mapid\" center={[52.377956, 4.897070]} zoom={9} scrollWheelZoom={true}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <TileLayer\n            url=\"https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png\"\n          />\n          { data && <GeoJSON data={data} style={this.style} />}\n        </MapContainer>\n\n        <div className='time-range-section'>\n          <div className='time-range-details'>\n            <div className='from'><b>From</b> {moment(selectedInterval[0]).format(\"D MMMM 'YY HH:mm\")}</div>\n            <div className='to'><b>To</b> {moment(selectedInterval[1]).format(\"D MMMM 'YY HH:mm\")}</div>\n          </div>\n          <TimeRange\n            //sliderRailClassName=\"time-slider\"\n            containerClassName=\"time-container\"\n            timelineInterval={[startTime, endTime]}\n            selectedInterval={temporarySelectedInterval}\n            onUpdateCallback={this.errorHandler}\n            onChangeCallback={this.onChangeCallback}\n            formatTick={this.formatTick}\n            ticksNumber={24}\n          />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}